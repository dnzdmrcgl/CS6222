#   } else if (trueCount == falseCount) {
#     return(as.numeric(sample(truthValues, 1)))
#   } else {
#     return (0)
#   }
# }
majorityVoting <- function(n, trueCounts, falseCounts, truthValues) {
if(trueCounts[n] > falseCounts[n]) {
return(1)
} else if (trueCounts[n] == falseCounts[n]) {
return(as.numeric(sample(truthValues[n,], 1)))
} else {
return (0)
}
}
getPrediction <- function(query, sample.predictions, indexList) {
overlapTable <- findOverlaps(query, sample.predictions, type = 'equal')
if (length(overlapTable) == 0) {
return (0)
}
queryIndex <- subjectHits(overlapTable)
table.index1 <- table(indexList$index1)
table.index2 <- table(indexList$index2)
table.index3 <- table(indexList$index3)
table.index4 <- table(indexList$index4)
times1 <- table.index1[match(queryIndex, names(table.index1))]
times2 <- table.index2[match(queryIndex, names(table.index2))]
times3 <- table.index3[match(queryIndex, names(table.index3))]
times4 <- table.index4[match(queryIndex, names(table.index4))]
times1[is.na(times1)] <- 0
times2[is.na(times2)] <- 0
times3[is.na(times3)] <- 0
times4[is.na(times4)] <- 0
times <- matrix(c(times1, times2, times3, times4), nrow = length(times1))
truthValues <- as.matrix(mcols(sample.predictions[queryIndex])[,c('freebayesSNP', 'mutectSNP', 'vardictSNP', 'varscanSNP')])
result <- times * truthValues
trueCounts <- rowSums(result)
falseCounts <- rowSums(times) - trueCounts
pred <- sapply(1:length(trueCounts), majorityVoting, trueCounts, falseCounts, truthValues)
return(pred)
}
getGroundTruth <- function(query, sample.predictions) {
overlapTable <- findOverlaps(query, sample.predictions, type = 'equal')
return(as.numeric(sample.predictions[subjectHits(overlapTable)]$truthTable))
}
evaluatePerformance <- function(predictions, labels) {
true.positive <- sum((predictions + labels) == 2)
test.outcome.positive <- sum(predictions)
condition.positive <- sum(labels)
precision <- true.positive / test.outcome.positive
recall <- true.positive / condition.positive
f1.score <- (2 * precision * recall) / (precision + recall)
return(c(f1.score = f1.score, precision = precision, recall = recall))
}
multipleSamplingRun <- function(query, sample.predictions, numberOfSampling, samplingPercentage) {
predictions <- rep(0, length(query))
truePredictions <- getGroundTruth(query, sample.predictions)
majorityVote <- as.integer(numberOfSampling / 2)
for(i in 1:numberOfSampling) {
sample.indexList <- getRandomSample(sample.predictions, samplingPercentage)
predictions <- predictions + getPrediction(query, sample.predictions, sample.indexList)
}
predictions <- as.numeric(predictions > majorityVote)
performance <- evaluatePerformance(predictions, truePredictions)
return(performance)
}
syn1.data <- loadTrainingData(parentDirectory = '../data/training/', directory = 'syn1')
syn2.data <- loadTrainingData(parentDirectory = '../data/training/', directory = 'syn2')
syn3.data <- loadTrainingData(parentDirectory = '../data/training/', directory = 'syn3')
syn4.data <- loadTrainingData(parentDirectory = '../data/training/', directory = 'syn4')
syn5.data <- loadTrainingData(parentDirectory = '../data/training/', directory = 'syn5')
real1.data <- loadTrainingData(parentDirectory = '../data/training/', directory = 'real1')
syn1.predictions <- getAllPredictions(syn1.data)
syn2.predictions <- getAllPredictions(syn2.data)
syn3.predictions <- getAllPredictions(syn3.data)
syn4.predictions <- getAllPredictions(syn4.data)
syn5.predictions <- getAllPredictions(syn5.data)
real1.predictions <- getAllPredictions(real1.data)
numberOfSampling <- 11
samplingPercentage <- 0.6
getPerformance <- function(sample, sampleName, samplingRates, samplingNumber) {
numberOfSampling <- samplingNumber[[1]]
sampling.1 <- sapply(samplingRates, function(p) {multipleSamplingRun(sample, sample, numberOfSampling, samplingPercentage = p)})
numberOfSampling <- samplingNumber[[2]]
sampling.2 <- sapply(samplingRates, function(p) {multipleSamplingRun(sample, sample, numberOfSampling, samplingPercentage = p)})
numberOfSampling <- samplingNumber[[3]]
sampling.3 <- sapply(samplingRates, function(p) {multipleSamplingRun(sample, sample, numberOfSampling, samplingPercentage = p)})
numberOfSampling <- samplingNumber[[4]]
sampling.4 <- sapply(samplingRates, function(p) {multipleSamplingRun(sample, sample, numberOfSampling, samplingPercentage = p)})
numberOfSampling <- samplingNumber[[5]]
sampling.5 <- sapply(samplingRates, function(p) {multipleSamplingRun(sample, sample, numberOfSampling, samplingPercentage = p)})
numberOfSampling <- samplingNumber[[6]]
sampling.6 <- sapply(samplingRates, function(p) {multipleSamplingRun(sample, sample, numberOfSampling, samplingPercentage = p)})
f1.scores <- c(sampling.1[1,], sampling.2[1,], sampling.3[1,], sampling.4[1,], sampling.5[1,], sampling.6[1,])
precision <- c(sampling.1[2,], sampling.2[2,], sampling.3[2,], sampling.4[2,], sampling.5[2,], sampling.6[2,])
recall <- c(sampling.1[3,], sampling.2[3,], sampling.3[3,], sampling.4[3,], sampling.5[3,], sampling.6[3,])
samplingRatesAll <- rep(samplingRates, length(samplingNumber))
samplingNumberAll <- rep(samplingNumber, rep(length(samplingRates), length(samplingNumber)))
sampleNameAll <- rep(sampleName, length(samplingNumberAll))
sample.performance <- data.frame(f1.scores, precision, recall, samplingRatesAll, samplingNumberAll, sampleNameAll)
return(sample.performance)
}
syn1.performance <- readRDS('./performance/syn1Performace.rds')
syn2.performance <- readRDS('./performance/syn2Performace.rds')
syn3.performance <- readRDS('./performance/syn3Performace.rds')
syn4.performance <- readRDS('./performance/syn4Performace.rds')
syn5.performance <- readRDS('./performance/syn5Performace.rds')
real1.performance <- readRDS('./performance/real1Performace.rds')
p <- ggplot(data = syn1.performance, aes(y = f1.scores, x = samplingRatesAll, group = samplingNumberAll, color = samplingNumberAll))
p + geom_line()
p + geom_line() + geom_point()
p + geom_line() + geom_point() + scale_color_gradientn(colours = rainbow(5))
p + geom_line() + geom_point() + scale_color_gradientn(colours = rainbow(6))
plotPerformance <- function(sample.performance, sampleName) {
p <- ggplot(data = sample.performance, aes(y = f1.scores, x = samplingRatesAll, group = samplingNumberAll, color = samplingNumberAll))
p <- p + geom_line() + geom_point() + scale_color_gradientn(colours = rainbow(6))
pdf(paste0('./plots/', sampleName, '-f1score.pdf'), width = 15, height = 15)
print(p)
dev.off()
p <- ggplot(data = sample.performance, aes(y = f1.scores, x = samplingRatesAll, group = samplingNumberAll, color = samplingNumberAll))
p <- p + geom_line() + geom_point() + scale_color_gradientn(colours = rainbow(6))
pdf(paste0('./plots/', sampleName, '-f1score.pdf'), width = 15, height = 15)
print(p)
dev.off()
p <- ggplot(data = sample.performance, aes(y = f1.scores, x = samplingRatesAll, group = samplingNumberAll, color = samplingNumberAll))
p <- p + geom_line() + geom_point() + scale_color_gradientn(colours = rainbow(6))
pdf(paste0('./plots/', sampleName, '-f1score.pdf'), width = 15, height = 15)
print(p)
dev.off()
}
plotPerformance <- function(sample.performance, sampleName) {
p <- ggplot(data = sample.performance, aes(y = f1.scores, x = samplingRatesAll, group = samplingNumberAll, color = samplingNumberAll))
p <- p + geom_line() + geom_point() + scale_color_gradientn(colours = rainbow(6))
pdf(paste0('./plots/', sampleName, '-f1score.pdf'), width = 15, height = 15)
print(p)
dev.off()
p <- ggplot(data = sample.performance, aes(y = precision, x = samplingRatesAll, group = samplingNumberAll, color = samplingNumberAll))
p <- p + geom_line() + geom_point() + scale_color_gradientn(colours = rainbow(6))
pdf(paste0('./plots/', sampleName, '-precision.pdf'), width = 15, height = 15)
print(p)
dev.off()
p <- ggplot(data = sample.performance, aes(y = recall, x = samplingRatesAll, group = samplingNumberAll, color = samplingNumberAll))
p <- p + geom_line() + geom_point() + scale_color_gradientn(colours = rainbow(6))
pdf(paste0('./plots/', sampleName, '-recall.pdf'), width = 15, height = 15)
print(p)
dev.off()
}
plotPerformance(syn1.performance, 'syn1')
plotPerformance(syn2.performance, 'syn2')
plotPerformance(syn3.performance, 'syn3')
plotPerformance(syn4.performance, 'syn4')
plotPerformance(syn5.performance, 'syn5')
plotPerformance(real1.performance, 'real1')
p <- ggplot(data = sample.performance, aes(y = f1.scores, x = samplingRatesAll, group = samplingNumberAll, color = samplingNumberAll))
p <- p + geom_line() + geom_point() + scale_color_gradientn(colours = rainbow(3))
p <- ggplot(data = syn1.performance, aes(y = f1.scores, x = samplingRatesAll, group = samplingNumberAll, color = samplingNumberAll))
p <- p + geom_line() + geom_point() + scale_color_gradientn(colours = rainbow(3))
p <- ggplot(data = syn1.performance, aes(y = f1.scores, x = samplingRatesAll, group = samplingNumberAll, color = samplingNumberAll))
p + geom_line() + geom_point() + scale_color_gradientn(colours = rainbow(3))
p + geom_line() + geom_point() + scale_color_gradientn(colours = rainbow(2))
p + geom_line() + geom_point() + scale_color_gradientn(colours = rainbow(4))
p + geom_line() + geom_point() + scale_color_gradientn(colours = rainbow(6))
plotPerformance <- function(sample.performance, sampleName) {
p <- ggplot(data = sample.performance, aes(y = f1.scores, x = samplingRatesAll, group = samplingNumberAll, color = samplingNumberAll))
p <- p + geom_line() + geom_point() + scale_color_gradientn(colours = rainbow(6))
jpeg(paste0('./plots/', sampleName, '-f1score.jpeg'), width = 2000, height = 2000)
print(p)
dev.off()
p <- ggplot(data = sample.performance, aes(y = precision, x = samplingRatesAll, group = samplingNumberAll, color = samplingNumberAll))
p <- p + geom_line() + geom_point() + scale_color_gradientn(colours = rainbow(6))
jpeg(paste0('./plots/', sampleName, '-precision.jpeg'), width = 2000, height = 2000)
print(p)
dev.off()
p <- ggplot(data = sample.performance, aes(y = recall, x = samplingRatesAll, group = samplingNumberAll, color = samplingNumberAll))
p <- p + geom_line() + geom_point() + scale_color_gradientn(colours = rainbow(6))
jpeg(paste0('./plots/', sampleName, '-recall.jpeg'), width = 2000, height = 2000)
print(p)
dev.off()
}
plotPerformance(syn1.performance, 'syn1')
plotPerformance(syn2.performance, 'syn2')
plotPerformance(syn3.performance, 'syn3')
plotPerformance(syn4.performance, 'syn4')
plotPerformance(syn5.performance, 'syn5')
plotPerformance(real1.performance, 'real1')
plotPerformance <- function(sample.performance, sampleName) {
p <- ggplot(data = sample.performance, aes(y = f1.scores, x = samplingRatesAll, group = samplingNumberAll, color = samplingNumberAll))
p <- p + geom_line() + geom_point() + scale_color_gradientn(colours = rainbow(6))
jpeg(paste0('./plots/', sampleName, '-f1score.jpeg'), width = 1000, height = 1000)
print(p)
dev.off()
p <- ggplot(data = sample.performance, aes(y = precision, x = samplingRatesAll, group = samplingNumberAll, color = samplingNumberAll))
p <- p + geom_line() + geom_point() + scale_color_gradientn(colours = rainbow(6))
jpeg(paste0('./plots/', sampleName, '-precision.jpeg'), width = 1000, height = 1000)
print(p)
dev.off()
p <- ggplot(data = sample.performance, aes(y = recall, x = samplingRatesAll, group = samplingNumberAll, color = samplingNumberAll))
p <- p + geom_line() + geom_point() + scale_color_gradientn(colours = rainbow(6))
jpeg(paste0('./plots/', sampleName, '-recall.jpeg'), width = 1000, height = 1000)
print(p)
dev.off()
}
plotPerformance(syn1.performance, 'syn1')
plotPerformance(syn2.performance, 'syn2')
plotPerformance(syn3.performance, 'syn3')
plotPerformance(syn4.performance, 'syn4')
plotPerformance(syn5.performance, 'syn5')
plotPerformance(real1.performance, 'real1')
plotPerformance <- function(sample.performance, sampleName) {
p <- ggplot(data = sample.performance, aes(y = f1.scores, x = samplingRatesAll, group = samplingNumberAll, color = samplingNumberAll))
p <- p + geom_line() + geom_point() + scale_color_gradientn(colours = rainbow(6))
jpeg(paste0('./plots/', sampleName, '-f1score.jpeg'), width = 600, height = 600)
print(p)
dev.off()
p <- ggplot(data = sample.performance, aes(y = precision, x = samplingRatesAll, group = samplingNumberAll, color = samplingNumberAll))
p <- p + geom_line() + geom_point() + scale_color_gradientn(colours = rainbow(6))
jpeg(paste0('./plots/', sampleName, '-precision.jpeg'), width = 600, height = 600)
print(p)
dev.off()
p <- ggplot(data = sample.performance, aes(y = recall, x = samplingRatesAll, group = samplingNumberAll, color = samplingNumberAll))
p <- p + geom_line() + geom_point() + scale_color_gradientn(colours = rainbow(6))
jpeg(paste0('./plots/', sampleName, '-recall.jpeg'), width = 600, height = 600)
print(p)
dev.off()
}
plotPerformance(syn1.performance, 'syn1')
plotPerformance(syn2.performance, 'syn2')
plotPerformance(syn3.performance, 'syn3')
plotPerformance(syn4.performance, 'syn4')
plotPerformance(syn5.performance, 'syn5')
plotPerformance(real1.performance, 'real1')
plotPerformance <- function(sample.performance, sampleName) {
p <- ggplot(data = sample.performance, aes(y = f1.scores, x = samplingRatesAll, group = samplingNumberAll, color = samplingNumberAll))
p <- p + geom_line() + geom_point() + scale_color_gradientn(colours = rainbow(6))
jpeg(paste0('./plots/', sampleName, '-f1score.jpeg'), width = 450, height = 450)
print(p)
dev.off()
p <- ggplot(data = sample.performance, aes(y = precision, x = samplingRatesAll, group = samplingNumberAll, color = samplingNumberAll))
p <- p + geom_line() + geom_point() + scale_color_gradientn(colours = rainbow(6))
jpeg(paste0('./plots/', sampleName, '-precision.jpeg'), width = 450, height = 450)
print(p)
dev.off()
p <- ggplot(data = sample.performance, aes(y = recall, x = samplingRatesAll, group = samplingNumberAll, color = samplingNumberAll))
p <- p + geom_line() + geom_point() + scale_color_gradientn(colours = rainbow(6))
jpeg(paste0('./plots/', sampleName, '-recall.jpeg'), width = 450, height = 450)
print(p)
dev.off()
}
plotPerformance(syn1.performance, 'syn1')
plotPerformance(syn2.performance, 'syn2')
plotPerformance(syn3.performance, 'syn3')
plotPerformance(syn4.performance, 'syn4')
plotPerformance(syn5.performance, 'syn5')
plotPerformance(real1.performance, 'real1')
sapply(syn1.data$freebayesVCF, length)
sapply(syn1.data$freebayesVCF[1:5], length)
width(syn1.data$freebayesVCF[1:5])
any(width(syn1.data$freebayesVCF) > 1)
any(width(syn1.data$mutectVCF) > 1)
any(width(syn1.data$vardictVCF) > 1)
any(width(syn1.data$varscanVCF) > 1)
any(width(syn2.data$freebayesVCF) > 1)
any(width(syn2.data$mutectVCF) > 1)
any(width(syn2.data$vardictVCF) > 1)
any(width(syn2.data$varscanVCF) > 1)
any(width(syn3.data$freebayesVCF) > 1)
any(width(syn3.data$mutectVCF) > 1)
any(width(syn3.data$vardictVCF) > 1)
any(width(syn3.data$varscanVCF) > 1)
any(width(syn4.data$freebayesVCF) > 1)
any(width(syn4.data$mutectVCF) > 1)
any(width(syn4.data$vardictVCF) > 1)
any(width(syn4.data$varscanVCF) > 1)
any(width(syn5.data$freebayesVCF) > 1)
any(width(syn5.data$mutectVCF) > 1)
any(width(syn5.data$vardictVCF) > 1)
any(width(syn5.data$varscanVCF) > 1)
any(width(real1.data$freebayesVCF) > 1)
any(width(real1.data$mutectVCF) > 1)
any(width(real1.data$vardictVCF) > 1)
any(width(real1.data$varscanVCF) > 1)
head(syn1.performance)
syn1.performance[syn1.performance$samplingRatesAll == 0.60 & syn1.performance$samplingNumberAll == 9, c('f1.scores', 'precision', 'recall')]
syn1.performance[syn1.performance$samplingRatesAll == 0.60 & syn1.performance$samplingNumberAll == 9, c(1,2,3)]
syn1.performance[syn1.performance$samplingRatesAll == 0.60 & syn1.performance$samplingNumberAll == 9,]
syn1.performance$samplingNumberAll
syn1.performance$samplingRatesAll == 0.60
syn1.performance$samplingRatesAll
syn1.performance$samplingRatesAll == 0.6
syn1.performance[syn1.performance$samplingRatesAll < 0.62 & syn1.performance$samplingRatesAll > 0.58 & syn1.performance$samplingNumberAll == 9,]
syn1.performance[syn1.performance$samplingRatesAll < 0.62 & syn1.performance$samplingRatesAll > 0.58 & syn1.performance$samplingNumberAll == 9, c(1,2,3)]
syn1.performance[88,]
syn2.performance[88,]
syn1.performance[88,]
syn2.performance[88,]
syn3.performance[88,]
syn3.performance[88,]
syn5.performance[88,]
real1.performance[88,]
syn4.performance[88,]
library(GenomicFeatures)
library(GenomicAlignments)
library(Rsamtools)
library(VariantAnnotation)
library(ggplot2)
readBedFile <- function(bedFilePath) {
df <- read.table(bedFilePath, header=F, stringsAsFactors=F)
names(df) <- c('chr','start','end')
gr <- with(df, GRanges(chr, IRanges(start, end)))
return(gr)
}
loadTrainingData <- function(parentDirectory = '../data/training/', directory = 'syn1') {
dataDirectory <- paste0(parentDirectory, directory, '/')
tumorBam <- NULL
normalBam <- NULL
freebayesFilePath <- paste0(dataDirectory, directory, '_', 'freebayes.vcf')
mutectFilePath <- paste0(dataDirectory, directory, '_', 'mutect.vcf')
vardictFilePath <- paste0(dataDirectory, directory, '_', 'vardict.vcf')
varscanFilePath <- paste0(dataDirectory, directory, '_', 'varscan.vcf')
truthFilePath <- paste0(dataDirectory, directory, '_', 'truth.bed')
freebayesVCF <- rowRanges(readVcf(freebayesFilePath, 'hg19'))
mutectVCF <- rowRanges(readVcf(mutectFilePath, 'hg19'))
vardictVCF <- rowRanges(readVcf(vardictFilePath, 'hg19'))
varscanVCF <- rowRanges(readVcf(varscanFilePath, 'hg19'))
truthSet <- readBedFile(truthFilePath)
if ( substr(directory, 1, 3) == 'syn' ) {
normalBamFilePath <- paste0(dataDirectory, directory, '_', 'normal.bam')
tumorBamFilePath <- paste0(dataDirectory, directory, '_', 'tumor.bam')
normalBam <- readGAlignments(BamFile(normalBamFilePath))
tumorBam <- readGAlignments(BamFile(tumorBamFilePath))
}
return(list(freebayesVCF = freebayesVCF, mutectVCF = mutectVCF, vardictVCF = vardictVCF,
varscanVCF = varscanVCF, truthSet = truthSet, normalBam = normalBam, tumorBam = tumorBam))
}
getAllPredictions <- function(sampleData) {
allPredictions <- unique(c(sampleData$freebayesVCF, sampleData$mutectVCF, sampleData$vardictVCF, sampleData$varscanVCF))
allPredictions$freebayesSNP <- overlapsAny(allPredictions, sampleData$freebayesVCF, type = 'equal')
allPredictions$mutectSNP <- overlapsAny(allPredictions, sampleData$mutectVCF, type = 'equal')
allPredictions$vardictSNP <- overlapsAny(allPredictions, sampleData$vardictVCF, type = 'equal')
allPredictions$varscanSNP <- overlapsAny(allPredictions, sampleData$varscanVCF, type = 'equal')
allPredictions$truthTable <- overlapsAny(allPredictions, sampleData$truthSet, type = 'equal')
return(allPredictions)
}
getRandomSample <- function(syn1.predictions, percentage) {
index1 <- sample(1:length(syn1.predictions), as.integer(length(syn1.predictions) * percentage), replace = TRUE)
index2 <- sample(1:length(syn1.predictions), as.integer(length(syn1.predictions) * percentage), replace = TRUE)
index3 <- sample(1:length(syn1.predictions), as.integer(length(syn1.predictions) * percentage), replace = TRUE)
index4 <- sample(1:length(syn1.predictions), as.integer(length(syn1.predictions) * percentage), replace = TRUE)
return(list(index1 = index1, index2 = index2, index3 = index3, index4 = index4))
}
# getPrediction <- function(query, syn1.predictions, indexList) {
#   overlapTable <- findOverlaps(query, syn1.predictions, type = 'equal')
#   if (length(overlapTable) == 0) {
#     return (0)
#   }
#
#   queryIndex <- subjectHits(overlapTable)
#   times <- c(sum(is.element(queryIndex, indexList$index1)), sum(is.element(queryIndex, indexList$index2)), sum(is.element(queryIndex, indexList$index3)), sum(is.element(queryIndex, indexList$index4)))
#
#   trueCount <- 0
#   falseCount <- 0
#
#   truthValues <- unlist(mcols(syn1.predictions[queryIndex])[,c('freebayesSNP', 'mutectSNP', 'vardictSNP', 'varscanSNP')])
#   trueCount <- sum(truthValues * times)
#   falseCount <- sum(times) - trueCount
#
#   if(trueCount > falseCount) {
#     return(1)
#   } else if (trueCount == falseCount) {
#     return(as.numeric(sample(truthValues, 1)))
#   } else {
#     return (0)
#   }
# }
majorityVoting <- function(n, trueCounts, falseCounts, truthValues) {
if(trueCounts[n] > falseCounts[n]) {
return(1)
} else if (trueCounts[n] == falseCounts[n]) {
return(as.numeric(sample(truthValues[n,], 1)))
} else {
return (0)
}
}
getPrediction <- function(query, sample.predictions, indexList) {
overlapTable <- findOverlaps(query, sample.predictions, type = 'equal')
if (length(overlapTable) == 0) {
return (0)
}
queryIndex <- subjectHits(overlapTable)
table.index1 <- table(indexList$index1)
table.index2 <- table(indexList$index2)
table.index3 <- table(indexList$index3)
table.index4 <- table(indexList$index4)
times1 <- table.index1[match(queryIndex, names(table.index1))]
times2 <- table.index2[match(queryIndex, names(table.index2))]
times3 <- table.index3[match(queryIndex, names(table.index3))]
times4 <- table.index4[match(queryIndex, names(table.index4))]
times1[is.na(times1)] <- 0
times2[is.na(times2)] <- 0
times3[is.na(times3)] <- 0
times4[is.na(times4)] <- 0
times <- matrix(c(times1, times2, times3, times4), nrow = length(times1))
truthValues <- as.matrix(mcols(sample.predictions[queryIndex])[,c('freebayesSNP', 'mutectSNP', 'vardictSNP', 'varscanSNP')])
result <- times * truthValues
trueCounts <- rowSums(result)
falseCounts <- rowSums(times) - trueCounts
pred <- sapply(1:length(trueCounts), majorityVoting, trueCounts, falseCounts, truthValues)
return(pred)
}
getGroundTruth <- function(query, sample.predictions) {
overlapTable <- findOverlaps(query, sample.predictions, type = 'equal')
return(as.numeric(sample.predictions[subjectHits(overlapTable)]$truthTable))
}
evaluatePerformance <- function(predictions, labels) {
true.positive <- sum((predictions + labels) == 2)
test.outcome.positive <- sum(predictions)
condition.positive <- sum(labels)
precision <- true.positive / test.outcome.positive
recall <- true.positive / condition.positive
f1.score <- (2 * precision * recall) / (precision + recall)
return(c(f1.score = f1.score, precision = precision, recall = recall))
}
multipleSamplingRun <- function(query, sample.predictions, numberOfSampling, samplingPercentage) {
predictions <- rep(0, length(query))
truePredictions <- getGroundTruth(query, sample.predictions)
majorityVote <- as.integer(numberOfSampling / 2)
for(i in 1:numberOfSampling) {
sample.indexList <- getRandomSample(sample.predictions, samplingPercentage)
predictions <- predictions + getPrediction(query, sample.predictions, sample.indexList)
}
predictions <- as.numeric(predictions > majorityVote)
performance <- evaluatePerformance(predictions, truePredictions)
return(performance)
}
syn1.data <- loadTrainingData(parentDirectory = '../data/training/', directory = 'syn1')
syn2.data <- loadTrainingData(parentDirectory = '../data/training/', directory = 'syn2')
syn3.data <- loadTrainingData(parentDirectory = '../data/training/', directory = 'syn3')
syn4.data <- loadTrainingData(parentDirectory = '../data/training/', directory = 'syn4')
syn5.data <- loadTrainingData(parentDirectory = '../data/training/', directory = 'syn5')
real1.data <- loadTrainingData(parentDirectory = '../data/training/', directory = 'real1')
syn1.predictions <- getAllPredictions(syn1.data)
syn2.predictions <- getAllPredictions(syn2.data)
syn3.predictions <- getAllPredictions(syn3.data)
syn4.predictions <- getAllPredictions(syn4.data)
syn5.predictions <- getAllPredictions(syn5.data)
real1.predictions <- getAllPredictions(real1.data)
getPerformance <- function(sample, sampleName, samplingRates, samplingNumber) {
numberOfSampling <- samplingNumber[[1]]
sampling.1 <- sapply(samplingRates, function(p) {multipleSamplingRun(sample, sample, numberOfSampling, samplingPercentage = p)})
numberOfSampling <- samplingNumber[[2]]
sampling.2 <- sapply(samplingRates, function(p) {multipleSamplingRun(sample, sample, numberOfSampling, samplingPercentage = p)})
numberOfSampling <- samplingNumber[[3]]
sampling.3 <- sapply(samplingRates, function(p) {multipleSamplingRun(sample, sample, numberOfSampling, samplingPercentage = p)})
numberOfSampling <- samplingNumber[[4]]
sampling.4 <- sapply(samplingRates, function(p) {multipleSamplingRun(sample, sample, numberOfSampling, samplingPercentage = p)})
numberOfSampling <- samplingNumber[[5]]
sampling.5 <- sapply(samplingRates, function(p) {multipleSamplingRun(sample, sample, numberOfSampling, samplingPercentage = p)})
numberOfSampling <- samplingNumber[[6]]
sampling.6 <- sapply(samplingRates, function(p) {multipleSamplingRun(sample, sample, numberOfSampling, samplingPercentage = p)})
f1.scores <- c(sampling.1[1,], sampling.2[1,], sampling.3[1,], sampling.4[1,], sampling.5[1,], sampling.6[1,])
precision <- c(sampling.1[2,], sampling.2[2,], sampling.3[2,], sampling.4[2,], sampling.5[2,], sampling.6[2,])
recall <- c(sampling.1[3,], sampling.2[3,], sampling.3[3,], sampling.4[3,], sampling.5[3,], sampling.6[3,])
samplingRatesAll <- rep(samplingRates, length(samplingNumber))
samplingNumberAll <- rep(samplingNumber, rep(length(samplingRates), length(samplingNumber)))
sampleNameAll <- rep(sampleName, length(samplingNumberAll))
sample.performance <- data.frame(f1.scores, precision, recall, samplingRatesAll, samplingNumberAll, sampleNameAll)
return(sample.performance)
}
samplingRates <- seq(from = 0.05, to = 0.95, by = 0.05)
samplingNumber <- seq(from = 1, to = 11, by = 2)
syn1.performance <- readRDS('./performance/syn1Performace.rds')
syn2.performance <- readRDS('./performance/syn2Performace.rds')
syn3.performance <- readRDS('./performance/syn3Performace.rds')
syn4.performance <- readRDS('./performance/syn4Performace.rds')
syn5.performance <- readRDS('./performance/syn5Performace.rds')
real1.performance <- readRDS('./performance/real1Performace.rds')
head(syn1.data$freebayesVCF)
head(syn1.data$freebayesVCF$REF)
head(seq(syn1.data$freebayesVCF$REF))
head(syn1.data$freebayesVCF$REF$seq)
head(syn1.data$freebayesVCF$REF$width)
head(width(syn1.data$freebayesVCF$REF))
any(width(syn1.data$freebayesVCF$REF) != width(syn1.data$freebayesVCF$ALT))
syn1.data$freebayesVCF$REF
width(syn1.data$freebayesVCF$REF)
syn1.data$freebayesVCF$ALT
sapply(syn1.data$freebayesVCF$ALT, length)
sapply(syn1.data$freebayesVCF$ALT[1:10], length)
any(width(syn1.data$freebayesVCF$REF) != sapply(syn1.data$freebayesVCF$ALT, length))
any(width(syn1.data$mutectVCF$REF) != sapply(syn1.data$mutectVCF$ALT, length))
any(width(syn1.data$vardictVCF$REF) != sapply(syn1.data$vardictVCF$ALT, length))
any(width(syn1.data$varscanVCF$REF) != sapply(syn1.data$varscanVCF$ALT, length))
any(width(syn2.data$freebayesVCF$REF) != sapply(syn2.data$freebayesVCF$ALT, length))
any(width(syn2.data$mutectVCF$REF) != sapply(syn2.data$mutectVCF$ALT, length))
any(width(syn2.data$vardictVCF$REF) != sapply(syn2.data$vardictVCF$ALT, length))
any(width(syn2.data$varscanVCF$REF) != sapply(syn2.data$varscanVCF$ALT, length))
any(width(syn3.data$freebayesVCF$REF) != sapply(syn3.data$freebayesVCF$ALT, length))
any(width(syn3.data$mutectVCF$REF) != sapply(syn3.data$mutectVCF$ALT, length))
any(width(syn3.data$vardictVCF$REF) != sapply(syn3.data$vardictVCF$ALT, length))
any(width(syn3.data$varscanVCF$REF) != sapply(syn3.data$varscanVCF$ALT, length))
any(width(syn4.data$freebayesVCF$REF) != sapply(syn4.data$freebayesVCF$ALT, length))
any(width(syn4.data$mutectVCF$REF) != sapply(syn4.data$mutectVCF$ALT, length))
any(width(syn4.data$vardictVCF$REF) != sapply(syn4.data$vardictVCF$ALT, length))
any(width(syn4.data$varscanVCF$REF) != sapply(syn4.data$varscanVCF$ALT, length))
any(width(syn5.data$freebayesVCF$REF) != sapply(syn5.data$freebayesVCF$ALT, length))
any(width(syn5.data$mutectVCF$REF) != sapply(syn5.data$mutectVCF$ALT, length))
any(width(syn5.data$vardictVCF$REF) != sapply(syn5.data$vardictVCF$ALT, length))
any(width(syn5.data$varscanVCF$REF) != sapply(syn5.data$varscanVCF$ALT, length))
any(width(real1.data$freebayesVCF$REF) != sapply(real1.data$freebayesVCF$ALT, length))
any(width(real1.data$mutectVCF$REF) != sapply(real1.data$mutectVCF$ALT, length))
any(width(real1.data$vardictVCF$REF) != sapply(real1.data$vardictVCF$ALT, length))
any(width(real1.data$varscanVCF$REF) != sapply(real1.data$varscanVCF$ALT, length))
